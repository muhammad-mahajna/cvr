2024-08-15 11:08:00.369152: I tensorflow/core/util/port.cc:153] oneDNN custom operations are on. You may see slightly different numerical results due to floating-point round-off errors from different computation orders. To turn them off, set the environment variable `TF_ENABLE_ONEDNN_OPTS=0`.
2024-08-15 11:08:01.911638: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:485] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered
2024-08-15 11:08:02.363106: E external/local_xla/xla/stream_executor/cuda/cuda_dnn.cc:8454] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered
2024-08-15 11:08:02.486864: E external/local_xla/xla/stream_executor/cuda/cuda_blas.cc:1452] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered
2024-08-15 11:08:03.347403: I tensorflow/core/platform/cpu_feature_guard.cc:210] This TensorFlow binary is optimized to use available CPU instructions in performance-critical operations.
To enable the following instructions: AVX2 AVX512F AVX512_VNNI FMA, in other operations, rebuild TensorFlow with the appropriate compiler flags.
2024-08-15 11:08:06.583602: W tensorflow/compiler/tf2tensorrt/utils/py_utils.cc:38] TF-TRT Warning: Could not find TensorRT
starting loading in the data
finished loading in data
reshaping the data
making a dataset
getting a validation sample
finished splitting the validation
Model: "sequential"
┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓
┃ Layer (type)                    ┃ Output Shape           ┃       Param # ┃
┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩
│ separable_conv1d                │ (None, 435, 20)        │            43 │
│ (SeparableConv1D)               │                        │               │
├─────────────────────────────────┼────────────────────────┼───────────────┤
│ batch_normalization             │ (None, 435, 20)        │            80 │
│ (BatchNormalization)            │                        │               │
├─────────────────────────────────┼────────────────────────┼───────────────┤
│ max_pooling1d (MaxPooling1D)    │ (None, 217, 20)        │             0 │
├─────────────────────────────────┼────────────────────────┼───────────────┤
│ separable_conv1d_1              │ (None, 217, 40)        │           900 │
│ (SeparableConv1D)               │                        │               │
├─────────────────────────────────┼────────────────────────┼───────────────┤
│ batch_normalization_1           │ (None, 217, 40)        │           160 │
│ (BatchNormalization)            │                        │               │
├─────────────────────────────────┼────────────────────────┼───────────────┤
│ max_pooling1d_1 (MaxPooling1D)  │ (None, 108, 40)        │             0 │
├─────────────────────────────────┼────────────────────────┼───────────────┤
│ separable_conv1d_2              │ (None, 108, 80)        │         3,400 │
│ (SeparableConv1D)               │                        │               │
├─────────────────────────────────┼────────────────────────┼───────────────┤
│ batch_normalization_2           │ (None, 108, 80)        │           320 │
│ (BatchNormalization)            │                        │               │
├─────────────────────────────────┼────────────────────────┼───────────────┤
│ max_pooling1d_2 (MaxPooling1D)  │ (None, 54, 80)         │             0 │
├─────────────────────────────────┼────────────────────────┼───────────────┤
│ separable_conv1d_3              │ (None, 54, 120)        │         9,960 │
│ (SeparableConv1D)               │                        │               │
├─────────────────────────────────┼────────────────────────┼───────────────┤
│ batch_normalization_3           │ (None, 54, 120)        │           480 │
│ (BatchNormalization)            │                        │               │
├─────────────────────────────────┼────────────────────────┼───────────────┤
│ max_pooling1d_3 (MaxPooling1D)  │ (None, 27, 120)        │             0 │
├─────────────────────────────────┼────────────────────────┼───────────────┤
│ separable_conv1d_4              │ (None, 27, 240)        │        29,400 │
│ (SeparableConv1D)               │                        │               │
├─────────────────────────────────┼────────────────────────┼───────────────┤
│ batch_normalization_4           │ (None, 27, 240)        │           960 │
│ (BatchNormalization)            │                        │               │
├─────────────────────────────────┼────────────────────────┼───────────────┤
│ max_pooling1d_4 (MaxPooling1D)  │ (None, 13, 240)        │             0 │
├─────────────────────────────────┼────────────────────────┼───────────────┤
│ flatten (Flatten)               │ (None, 3120)           │             0 │
├─────────────────────────────────┼────────────────────────┼───────────────┤
│ dropout (Dropout)               │ (None, 3120)           │             0 │
├─────────────────────────────────┼────────────────────────┼───────────────┤
│ dense (Dense)                   │ (None, 1)              │         3,121 │
└─────────────────────────────────┴────────────────────────┴───────────────┘
 Total params: 48,824 (190.72 KB)
 Trainable params: 47,824 (186.81 KB)
 Non-trainable params: 1,000 (3.91 KB)
Epoch 1/20
958464/958464 - 3281s - 3ms/step - loss: 0.0304 - mse: 0.0304 - val_loss: 62420488.0000 - val_mse: 62420488.0000
Epoch 2/20
958464/958464 - 3354s - 3ms/step - loss: 0.0173 - mse: 0.0173 - val_loss: 9577.4199 - val_mse: 9577.4199
Epoch 3/20
958464/958464 - 3455s - 4ms/step - loss: 0.0170 - mse: 0.0170 - val_loss: 182683920.0000 - val_mse: 182683920.0000
Epoch 4/20
958464/958464 - 3502s - 4ms/step - loss: 0.0175 - mse: 0.0175 - val_loss: 2144032.0000 - val_mse: 2144032.0000
Epoch 5/20
958464/958464 - 3517s - 4ms/step - loss: 0.0171 - mse: 0.0171 - val_loss: 1071596544.0000 - val_mse: 1071596544.0000
Epoch 6/20
958464/958464 - 3524s - 4ms/step - loss: 0.0173 - mse: 0.0173 - val_loss: 8469543.0000 - val_mse: 8469543.0000
Epoch 7/20
958464/958464 - 3542s - 4ms/step - loss: 0.0171 - mse: 0.0171 - val_loss: 2676077.0000 - val_mse: 2676077.0000
Epoch 8/20
958464/958464 - 3534s - 4ms/step - loss: 0.0170 - mse: 0.0170 - val_loss: 3316433920.0000 - val_mse: 3316433920.0000
Epoch 9/20
958464/958464 - 3559s - 4ms/step - loss: 0.0174 - mse: 0.0174 - val_loss: 2189759232.0000 - val_mse: 2189759232.0000
Epoch 10/20
958464/958464 - 3566s - 4ms/step - loss: 0.0171 - mse: 0.0171 - val_loss: 1058989.0000 - val_mse: 1058989.0000
Epoch 11/20
958464/958464 - 3544s - 4ms/step - loss: 0.0170 - mse: 0.0170 - val_loss: 6411840.0000 - val_mse: 6411840.0000
Epoch 12/20
958464/958464 - 3545s - 4ms/step - loss: 0.0173 - mse: 0.0173 - val_loss: 517159.3125 - val_mse: 517159.3125
Epoch 13/20
958464/958464 - 3540s - 4ms/step - loss: 0.0172 - mse: 0.0172 - val_loss: 23140360.0000 - val_mse: 23140360.0000
Epoch 14/20
958464/958464 - 3544s - 4ms/step - loss: 0.0179 - mse: 0.0179 - val_loss: 4642065920.0000 - val_mse: 4642065920.0000
Epoch 15/20
958464/958464 - 3559s - 4ms/step - loss: 0.0171 - mse: 0.0171 - val_loss: 3234358.7500 - val_mse: 3234358.7500
Epoch 16/20
958464/958464 - 3573s - 4ms/step - loss: 0.0176 - mse: 0.0176 - val_loss: 76.0005 - val_mse: 76.0005
Epoch 17/20
958464/958464 - 3551s - 4ms/step - loss: 0.0174 - mse: 0.0174 - val_loss: 497963.0312 - val_mse: 497963.0312
Epoch 18/20
958464/958464 - 3570s - 4ms/step - loss: 0.0173 - mse: 0.0173 - val_loss: 204629.0156 - val_mse: 204629.0156
Epoch 19/20
958464/958464 - 3548s - 4ms/step - loss: 0.0170 - mse: 0.0170 - val_loss: 28024948.0000 - val_mse: 28024948.0000
Epoch 20/20
958464/958464 - 3525s - 4ms/step - loss: 0.0172 - mse: 0.0172 - val_loss: 9397605.0000 - val_mse: 9397605.0000
/home/ethan.church/software/miniconda3/envs/gpu_tflow/lib/python3.11/site-packages/keras/src/activations/__init__.py:54: UserWarning: The object being serialized includes a `lambda`. This is unsafe. In order to reload the object, you will have to pass `safe_mode=False` to the loading function. Please avoid using `lambda` in the future, and use named Python functions instead. This is the `lambda` being serialized:     model.add(layers.SeparableConv1D(filters = 20, kernel_size=3, activation=lambda x:tf.nn.leaky_relu(x,alpha=0.01),padding='same'))

  fn_config = serialization_lib.serialize_keras_object(activation)
/home/ethan.church/software/miniconda3/envs/gpu_tflow/lib/python3.11/site-packages/keras/src/activations/__init__.py:54: UserWarning: The object being serialized includes a `lambda`. This is unsafe. In order to reload the object, you will have to pass `safe_mode=False` to the loading function. Please avoid using `lambda` in the future, and use named Python functions instead. This is the `lambda` being serialized:     model.add(layers.SeparableConv1D(filters = 40, kernel_size=3, activation=lambda x:tf.nn.leaky_relu(x,alpha=0.01),padding='same'))#kernel_initializer=keras.initializers.HeNormal(), kernel_regularizer=reg.l2(weight_decay)))

  fn_config = serialization_lib.serialize_keras_object(activation)
/home/ethan.church/software/miniconda3/envs/gpu_tflow/lib/python3.11/site-packages/keras/src/activations/__init__.py:54: UserWarning: The object being serialized includes a `lambda`. This is unsafe. In order to reload the object, you will have to pass `safe_mode=False` to the loading function. Please avoid using `lambda` in the future, and use named Python functions instead. This is the `lambda` being serialized:     model.add(layers.SeparableConv1D(filters = 80, kernel_size=3, activation=lambda x:tf.nn.leaky_relu(x,alpha=0.01),padding='same'))#kernel_initializer=keras.initializers.HeNormal(), kernel_regularizer=reg.l2(weight_decay)))

  fn_config = serialization_lib.serialize_keras_object(activation)
/home/ethan.church/software/miniconda3/envs/gpu_tflow/lib/python3.11/site-packages/keras/src/activations/__init__.py:54: UserWarning: The object being serialized includes a `lambda`. This is unsafe. In order to reload the object, you will have to pass `safe_mode=False` to the loading function. Please avoid using `lambda` in the future, and use named Python functions instead. This is the `lambda` being serialized:     model.add(layers.SeparableConv1D(filters = 120, kernel_size=3, activation=lambda x:tf.nn.leaky_relu(x,alpha=0.01),padding='same'))#kernel_initializer=keras.initializers.HeNormal(), kernel_regularizer=reg.l2(weight_decay)))

  fn_config = serialization_lib.serialize_keras_object(activation)
/home/ethan.church/software/miniconda3/envs/gpu_tflow/lib/python3.11/site-packages/keras/src/activations/__init__.py:54: UserWarning: The object being serialized includes a `lambda`. This is unsafe. In order to reload the object, you will have to pass `safe_mode=False` to the loading function. Please avoid using `lambda` in the future, and use named Python functions instead. This is the `lambda` being serialized:     model.add(layers.SeparableConv1D(filters = 240, kernel_size=3, activation=lambda x:tf.nn.leaky_relu(x,alpha=0.01),padding='same'))#,kernel_initializer=keras.initializers.HeNormal(), kernel_regularizer=reg.l2(weight_decay)))

  fn_config = serialization_lib.serialize_keras_object(activation)
